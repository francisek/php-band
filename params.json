{"name":"Php-band","tagline":"A bash application to manage compilation of multiple php versions","body":"# php-band\r\n\r\n<img src=\"https://circleci.com/gh/francisek/php-band/tree/master.svg?style=shield&circle-token=0e2b5681405bbc52e77bce982d74c449b46636d8\" />\r\n\r\nA simple bash tool to compile php versions\r\n\r\n\r\n# Installation\r\n\r\nJust clone the repository\r\n```\r\ngit clone git@github.com:francisek/php-band\r\n```\r\n\r\n# Requirements\r\n\r\nTo compile a PHP version, you will need:\r\n\r\n+ a bash shell with which, tar, sed and wget commands available \r\n+ any requirement for PHP compilation (<http://php.net/manual/en/install.unix.php>)\r\n\r\n# Using php-band\r\n\r\nRun\r\n``` \r\nbin/php-band --help\r\n```\r\nto get help on how to run this tool.\r\n\r\n# Running tests\r\n\r\nThe test suite uses the bats framework.\r\nInstall it from repository:\r\n\r\n```\r\ngit clone --depth 1 git@github.com:sstephenson/bats.git\r\n```\r\nThen run the tests :\r\n```\r\n./bats/bin/bats tests\r\n```\r\n\r\nif you want also to fully compile php while testing, you have to set the environment variable PHP_BAND_TEST_COMPILATION.\r\n\r\n# The compilation process\r\n\r\nWhat does php-band is :\r\n\r\n+ check the validity of the version\r\n+ if it does not exist, attempts to download the php archive from a list of prefered sites\r\n+ if the php source directory does not exist, extract it from the archive into src directory\r\n+ switches to php tource directory\r\n+ reads per-version configuration\r\n+ if not already, configures php:\r\n    + runs the *pre_configure_php()* function\r\n    + runs configure\r\n    + runs the *post_configure_php()* function if configure was successfull\r\n    + marks the version as configured\r\n+ if not already compiled\r\n    + runs the *pre_compile_php()* function\r\n    + compiles php\r\n    + runs the *post_compile_php()* function if compilation was successfull\r\n    + marks the version as built\r\n+ installs php to inst/<version>\r\n+ runs *post_install_php()* function if installation was successfull\r\n\r\n# Custom configuration\r\n\r\n## How it works\r\n\r\nYou can define custom configuration to plot any version.\r\nThe version-independant configurations reside in the *config* directory.\r\nThe you can plot a specific version configuration in a version-like subtree of the *config* directory.\r\nTo get it clear, look at this example of config tree:\r\n\r\n```\r\n./config\r\n  + configure-php.sh\r\n  + 5/\r\n    + configure-php.sh\r\n    + 6/\r\n      + configure-php.sh\r\n```\r\n\r\nphp-band will use first *./config/configure-php.sh* for any version.\r\nThen if major version is 5, *./config/5/configure-php.sh* overrides the previous configuration.\r\nThen if major version is 5 and minor version is 6, *.config/5/6/configure-php.sh* overrides the previous configuration.\r\nAnd so on ...\r\n\r\n## What you can do\r\n\r\nEach version-matching *configure-php.sh* file is sourced into php-band with the version components as arguments (major, minor, patch and addon).\r\nYou can define some variables and functions to customize the version you are installing.\r\n\r\n## Alterable variables and functions\r\n\r\n+ *php_band_php_config_options* takes any argument that php's *configure* accepts except \"--prefix\" and \"--exec-prefix\".\r\nIts default value is defined to \"--disable-all\".\r\n+ *pre_configure_php()* is called before php's *configure*\r\n+ *post_configure_php()* is called after a successfull php's *configure*\r\n+ *pre_compile_php()* is called before php's *make*\r\n+ *post_compile_php()* is called after a successfull php's *make*\r\n+ *post_install_php()* is called after a successfull php's *make install*\r\n\r\n## Readonly variables\r\n\r\nThose variables can be used but should not be modified:\r\n\r\n+ *PHP_BAND_INST_DIR* Directory for all installations\r\n+ *PHP_BAND_SOURCE_DIR* Directory for all sources\r\n+ *php_band_php_install_dir* Directory into wich the current php will installed\r\n+ *php_version}} The full php version string (for example 5.6.3RC2)\r\n+ *php_version_major* The php major version (for example 5)\r\n+ *php_version_minor* The php minor version (for example 6)\r\n+ *php_version_patch* The php patch version (for example 3)\r\n+ *php_version_addon* The php version (for example RC2)\r\n+ *php_band_php_install_dir* The directory where php is installed\r\n\r\n## Usefull functions\r\n\r\nSome core functions may be usefull in your functions :\r\n\r\n+ *error_exit(error_message [, error_code])* \r\n  Displays the error_message and exits error_code\r\n+ *log_info(message)* \r\n  Displays a message\r\n+ *get_per_version_config(base_config_filename [, major_version][, minor_version][,patch_version][, ...])*\r\n  Sources all config files matching the version, starting from the less sibling.\r\n+ *php_band_substitute(filename)*\r\n  Substitute placeholder with corresponding variable value.\r\n  A placeholder is the name of the variable enclosed by double brackets.\r\n  Most usefull placeholders are:\r\n  + {{php_version}} The full php version string (for example 5.6.3RC2)\r\n  + {{php_version_major}} The php major version (for example 5)\r\n  + {{php_version_minor}} The php minor version (for example 6)\r\n  + {{php_version_patch}} The php patch version (for example 3)\r\n  + {{php_version_addon}} The php version (for example RC2)\r\n  + {{php_band_php_install_dir}} The directory where php is installed\r\n\r\n# Best practises in writing configuration files\r\n\r\nThe configuration file\r\n+ must not override protected variables\r\n+ should not create global variables\r\n+ if global variables are created, they should be prefixed with the *CUSTOM_* or *custom_* string (optionaly followed by your suffix)\r\n+ functions not accepted by php-band should be prefixed by *custom_* (optionnally followed by you suffix)\r\n\r\n","google":"UA-73127413-1","note":"Don't delete this file! It's used internally to help with page regeneration."}