#!/bin/bash

PHP_BAND_NAME=$(basename "$0")
BAND_DIR=$(dirname "$(dirname \"$(readlink -f \\\"$0\\\")\")")
ARCH_DIR=${BAND_DIR}/archs
INST_DIR=${BAND_DIR}/inst
SRC_DIR=${BAND_DIR}/src
WHICH_BIN=/bin/which
SED_BIN=$($WHICH_BIN sed)
WGET_BIN=$($WHICH_BIN wget)
# local vars
run_command=
src_format="xz"
arch_filename=
php_version=
php_version_major=
php_version_minor=
php_version_patch=
php_version_addon=
php_prefered_sites=(
    'http://museum.php.net/php${php_version_major}/${arch_filename}' 
    'http://www.php.net/get/${arch_filename}/from/this/mirror'
)

show_usage() {
    cat << EOM
Usage:
    ${PHP_BAND_NAME} [option] [...]
Where option in
    -h or --help : displays this help  
    -v or --version : displays php_band version
    --install php_version : installs a php version from source 
    --src-format gz|bz2|xz : format of downloaded archive (default xz)
EOM
   exit 1 
}

error_exit() {
    local msg=$1
    local code=$2
    echo -e "\033[0;31m$msg\033[0m"
    [ "$code" = "" ] || code=1
    exit $code
}

log_info() {
    echo -e "\033[0;30m$1\033[0m"
}

check_env() {
    [ "" != "$WHICH_BIN" -a -x "$WHICH_BIN" ] || error_exit "No which binary" 1
    [ "" != "$WGET_BIN" -a -x "$WGET_BIN" ] || error_exit "No wget binary" 1
    [ "" != "$SED_BIN" -a -x "$SED_BIN" ] || error_exit "No sed binary" 1
}

show_version() {
    echo "0.0.1"
    exit 0
}

parse_version() {
    local ver=$1
    php_version_major=${ver%%.*}
    ver=${ver#$php_version_major.}
    php_version_minor=${ver%%.*}
    ver=${ver#$php_version_minor.}
    php_version_patch=$(echo "$ver" | $SED_BIN -E 's/([0-9]+).*/\1/')
    ver=${ver#$php_version_patch}
    php_version_addon=$ver
    if [ $(printf "%s.%s.%s%s" "$php_version_major" "$php_version_minor" "$php_version_patch" "$php_version_addon") != "$1" ]; then
        php_version_major=""
    fi
}
# utilities
apply_shell_expansion() {
    declare data=$1
    declare delimiter="__apply_shell_expansion_delimiter__"
    declare command="cat <<$delimiter"$'\n'"$data"$'\n'"$delimiter"
    eval "$command"
}

# check for source
build_source_filename() {
    arch_filename=$(printf "php-%s.%s.%s%s.tar.%s" "$php_version_major" "$php_version_minor" "$php_version_patch" "$php_version_addon" "$src_format" )
}

check_for_source() {
    local host
    local srcfile
    build_source_filename
    srcfile="$ARCH_DIR/$arch_filename"
    [ -f "$srcfile" ] && return
    for i in ${php_prefered_sites[@]}; do
        host="$(apply_shell_expansion "${i%%}")"
        log_info "Attempting to download from $host"
        $WGET_BIN -P "$ARCH_DIR" -O "$srcfile" "$host"
        [ ! -s "$srcfile" -a -f "$srcfile" ] && rm "$srcfile"
        if [ -f "$srcfile" ]; then
            log_info "PHP $php_version has been downloaded"
            return
        fi
    done
    error_exit "Unable to download PHP source" 2
}

# Commands

command_install() {
    parse_version $php_version
    if [ "$php_version_major" = "" -o "$php_version_minor" = "" -o "$php_version_patch" = "" ]; then
        error_exit "The version format is not valid" 1
    fi
    build_source_filename
    check_for_source
}

handle_command(){
    case "$run_command" in
        --install)
            command_install;;
        *)
            error_exit "Unimplemented command $run_command"
            ;;
   esac

}

# parse arguments
args=$(getopt -l version,install:,help -o vh -- "$@")
eval set -- "$args"
while true; do
    case "$1" in
        -v|--version)
            show_version
            ;;
        --install)
            run_command="$1"
            php_version="$2"
            shift
            ;;
        --src-format)
            case "$2" in
                gz|bz2)
                    src_format="$2"
                    ;;
                *)
                    src_format="xz"
                    ;;
            esac
            shift
            ;;
        -h|--help)
            show_usage
            ;;
        --)
            break;;
    esac
    shift
done

[ "x$run_command" = "x" ] && show_usage
check_env
handle_command
exit 0
