#!/bin/bash

PHP_BAND_NAME=$(basename "$0")
pushd "$(dirname $0)" > /dev/null
BAND_DIR=$(dirname $(pwd -P))
popd > /dev/null
ARCH_DIR=${BAND_DIR}/archs
INST_DIR=${BAND_DIR}/inst
CONFIG_DIR=${BAND_DIR}/config
php_src_dirname=
SRC_DIR=${BAND_DIR}/src
# local vars
run_command=
src_format="xz"
arch_filename=
php_version=
php_version_major=
php_version_minor=
php_version_patch=
php_version_addon=
php_prefered_sites=(
    'http://museum.php.net/php${php_version_major}/${arch_filename}' 
    'http://docs.php.net/distributions/${arch_filename}'
)
# configurable options
php_inst_dir=
php_config_options=

source $BAND_DIR/lib/core.sh
# Commands

show_usage() {
    cat << EOM
Usage:
    ${PHP_BAND_NAME} [option] [...]
Where option in
    -h or --help : displays this help  
    -v or --version : displays php_band version
    --download php_version : download a php version from source 
    --install php_version : installs a php version from source 
    --src-format gz|bz2|xz : format of downloaded archive (default xz)
    -c or --config file : load file to define genral config
EOM
   exit 1 
}

command_version() {
    echo "0.0.1"
    exit 0
}

command_download() {
    parse_version $php_version
    if [ "$php_version_major" = "" -o "$php_version_minor" = "" -o "$php_version_patch" = "" ]; then
        error_exit "The version format is not valid" 1
    fi
    build_source_filename
    check_for_source
}

command_install() {
    parse_version $php_version
    command_download
    extract_source
    compile_php
}

command_src_format() {
    log_info "Source format is currently set to $src_format"
}

handle_command(){
    case "$run_command" in
        --download)
            command_download ;;
        --install)
            command_install;;
        --src-format)
            command_src_format;;
        --version)
            command_version;;
        *)
            error_exit "Unimplemented command $run_command"
            ;;
   esac

}

# parse arguments
args=$(getopt -l 'version,install:,download:,config:,src-format::,help' -o vhc: -- "$@")
eval set -- "$args"
while true; do
    case "$1" in
        -v|--version)
            [ "$run_command" != "" ] && multicommand_error
            run_command="--version"
            ;;
        --install|--download)
            [ "$run_command" != "" ] && multicommand_error
            run_command="$1"
            php_version="$2"
            shift
            ;;
        --src-format)
            case "$2" in
                xz|gz|bz2)
                    src_format="$2"
                    shift ;;
                *)
                    [ "$2" != "" ] && error_exit "Unknown source format $2" 2
                    [ "$run_command" != "" ] && multicommand_error
                    run_command="$1"
            esac
            ;;
        -h|--help)
            show_usage
            ;;
        -c|--config)
            unimplemented "--config option"
            if [ -f "$2" ]; then
                source "$2";
            else
                error_exit "No valid config file was specified"
            fi
            ;;
        --)
            break;;
    esac
    shift
done


[ "x$run_command" = "x" ] && show_usage
check_env
handle_command
exit 0
